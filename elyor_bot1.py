import os
import logging
import sqlite3
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from telegram.request import HTTPXRequest

# --- Ayarlar ve ortam deƒüi≈ükenleri ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_IDS = [int(x) for x in os.getenv("ADMIN_IDS", "").split(",") if x]

# --- Log (kayƒ±t) ayarlarƒ± ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- SQLite veritabanƒ± baƒülantƒ±sƒ± ---
conn = sqlite3.connect('sponsor_bot.db', check_same_thread=False)
cursor = conn.cursor()

# --- Tablolarƒ±n olu≈üturulmasƒ± ---
cursor.execute('''
CREATE TABLE IF NOT EXISTS channels (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    channel_id TEXT NOT NULL UNIQUE,
    channel_name TEXT NOT NULL
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS vpn_codes (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    code TEXT NOT NULL UNIQUE,
    used INTEGER DEFAULT 0,
    user_id INTEGER DEFAULT NULL,
    used_date TEXT DEFAULT NULL
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS user_stats (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    first_name TEXT,
    last_name TEXT,
    joined_date TEXT,
    last_active TEXT
)
''')

conn.commit()

# --- Yardƒ±mcƒ± fonksiyonlar ---
def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

# --- /start komutu ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    cursor.execute(
        "INSERT OR REPLACE INTO user_stats (user_id, username, first_name, last_name, joined_date, last_active) VALUES (?, ?, ?, ?, ?, ?)",
        (user.id, user.username, user.first_name, user.last_name,
         datetime.now().strftime("%Y-%m-%d %H:%M:%S"), datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
    conn.commit()
    await update.message.reply_text(
        f"Salam {user.first_name}! üéâ\n\nBu bot sponsor dolandyry≈üy √º√ßin ulanyl√Ωar. Komandalar √º√ßin /admin √Ωazy≈à."
    )

# --- /admin komutu ---
async def admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not is_admin(user.id):
        await update.message.reply_text("üö´ Bu komanda di≈àe adminler √º√ßin.")
        return

    keyboard = [
        [InlineKeyboardButton("üìä Statistika", callback_data="stats")],
        [InlineKeyboardButton("üîë Kod Dolandyry≈üy", callback_data="code_menu")],
        [InlineKeyboardButton("üì¢ Kanal Dolandyry≈üy", callback_data="channel_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üîê Admin Paneli", reply_markup=reply_markup)

# --- Callback / Buton i≈üleyici ---
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "stats":
        cursor.execute("SELECT COUNT(*) FROM user_stats")
        user_count = cursor.fetchone()[0]
        await query.edit_message_text(f"üìä Jemi ulanyjy sany: {user_count}")

    elif query.data == "code_menu":
        keyboard = [
            [InlineKeyboardButton("‚ûï Kod Go≈ü", callback_data="add_code")],
            [InlineKeyboardButton("üìú Kodlary G√∂r", callback_data="list_codes")],
            [InlineKeyboardButton("‚ùå Kod Poz", callback_data="delete_code")]
        ]
        await query.edit_message_text("üîë Kod Dolandyry≈üy", reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data == "add_code":
        context.user_data["mode"] = "add_code"
        await query.edit_message_text("Go≈ümak isle√Ω√§n VPN kody≈àyzy iberi≈à:")

    elif query.data == "list_codes":
        cursor.execute("SELECT code, used FROM vpn_codes")
        codes = cursor.fetchall()
        if not codes:
            await query.edit_message_text("Ent√§k √Ωazylan kod √Ωok.")
        else:
            text = "\n".join([f"{c[0]} - {'Ulanyldy' if c[1] else 'Ulanylmandy'}" for c in codes])
            await query.edit_message_text(f"üìú √ùazylan Kodlar:\n{text}")

    elif query.data == "delete_code":
        context.user_data["mode"] = "delete_code"
        await query.edit_message_text("Pozmak isle√Ω√§n kody≈àyzy iberi≈à:")

    elif query.data == "channel_menu":
        keyboard = [
            [InlineKeyboardButton("‚ûï Kanal Go≈ü", callback_data="add_channel")],
            [InlineKeyboardButton("üìú Kanallary G√∂r", callback_data="list_channels")],
            [InlineKeyboardButton("‚ùå Kanal Poz", callback_data="delete_channel")]
        ]
        await query.edit_message_text("üì¢ Kanal Dolandyry≈üy", reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data == "add_channel":
        context.user_data["mode"] = "add_channel"
        await query.edit_message_text("T√§ze kanal ID-si we adyny ≈üu formatda iberi≈à:\n@kanal_id - Kanal Ady")

    elif query.data == "list_channels":
        cursor.execute("SELECT channel_id, channel_name FROM channels")
        chans = cursor.fetchall()
        if not chans:
            await query.edit_message_text("Ent√§k √Ωazylan kanal √Ωok.")
        else:
            text = "\n".join([f"{c[0]} - {c[1]}" for c in chans])
            await query.edit_message_text(f"üìú √ùazylan Kanallar:\n{text}")

    elif query.data == "delete_channel":
        context.user_data["mode"] = "delete_channel"
        await query.edit_message_text("Pozmak isle√Ω√§n kanal ID-≈àizi iberi≈à:")

# --- Mesaj i≈üleyici ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    msg = update.message.text.strip()

    if is_admin(user.id) and "mode" in context.user_data:
        mode = context.user_data["mode"]

        if mode == "add_code":
            try:
                cursor.execute("INSERT INTO vpn_codes (code) VALUES (?)", (msg,))
                conn.commit()
                await update.message.reply_text("‚úÖ Kod √ºst√ºnlikli go≈üuldy.")
            except Exception as e:
                logger.exception("Kod go≈üulanda s√§wlik:")
                await update.message.reply_text("‚ö†Ô∏è Bu kod √∂≈àden bar √Ωa-da go≈üulanda s√§wlik boldy.")
            context.user_data.pop("mode", None)

        elif mode == "delete_code":
            cursor.execute("DELETE FROM vpn_codes WHERE code=?", (msg,))
            conn.commit()
            await update.message.reply_text("‚úÖ Kod pozuldy (eger bar bolsa).")
            context.user_data.pop("mode", None)

        elif mode == "add_channel":
            try:
                if "-" in msg:
                    parts = msg.split("-", 1)
                    chan_id = parts[0].strip()
                    chan_name = parts[1].strip()
                    cursor.execute("INSERT INTO channels (channel_id, channel_name) VALUES (?, ?)", (chan_id, chan_name))
                    conn.commit()
                    await update.message.reply_text("‚úÖ Kanal √ºst√ºnlikli go≈üuldy.")
                else:
                    await update.message.reply_text("‚ö†Ô∏è N√§dogry format. ≈ûu g√∂rn√º≈üde iberi≈à: @kanal_id - Kanal Ady")
            except Exception as e:
                logger.exception("Kanal go≈üulanda s√§wlik:")
                await update.message.reply_text("‚ö†Ô∏è Bu kanal √∂≈àden bar √Ωa-da go≈üulanda s√§wlik boldy.")
            context.user_data.pop("mode", None)

        elif mode == "delete_channel":
            cursor.execute("DELETE FROM channels WHERE channel_id=?", (msg,))
            conn.commit()
            await update.message.reply_text("‚úÖ Kanal pozuldy (eger bar bolsa).")
            context.user_data.pop("mode", None)

        return

    cursor.execute("UPDATE user_stats SET last_active=? WHERE user_id=?", 
                   (datetime.now().strftime("%Y-%m-%d %H:%M:%S"), user.id))
    conn.commit()

    await update.message.reply_text("Habary≈àyz alyndy. Sag bolu≈à! ‚úÖ")

# --- Hata i≈üleyici ---
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error("√ùal≈ày≈ülyk √Ω√ºze √ßykdy:", exc_info=context.error)

# --- Ana fonksiyon ---
def main():
    request = HTTPXRequest(http_version="1.1", connect_timeout=30, read_timeout=30)
    application = Application.builder().token(BOT_TOKEN).request(request).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("admin", admin))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_error_handler(error_handler)

    application.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
